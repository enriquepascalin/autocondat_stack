name: autocondat7

services:
  app:
    container_name: autocondat-app
    image: ${IMAGES_PREFIX:-}app-php
    restart: unless-stopped
    environment:
      SERVER_NAME: ${SERVER_NAME:-localhost}, php:80
      MERCURE_PUBLISHER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      MERCURE_SUBSCRIBER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      # Run "composer require symfony/orm-pack" to install and configure Doctrine ORM
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?serverVersion=16&charset=utf8

      # Run "composer require symfony/mercure-bundle" to install and configure the Mercure integration
      MERCURE_URL: ${CADDY_MERCURE_URL:-http://php/.well-known/mercure}
      MERCURE_PUBLIC_URL: ${CADDY_MERCURE_PUBLIC_URL:-https://${SERVER_NAME:-localhost}:${HTTPS_PORT:-443}/.well-known/mercure}
      MERCURE_JWT_SECRET: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      # The two next lines can be removed after initial installation
      SYMFONY_VERSION: ${SYMFONY_VERSION:-}
      STABILITY: ${STABILITY:-stable}
      COMPOSER_MEMORY_LIMIT: "-1"
      PHP_MEMORY_LIMIT: "1000M"
    volumes:
      - ../autocondat_symfony:/app:rw
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - autocondat-network
    ports:
      # HTTP
      - target: 80
        published: ${HTTP_PORT:-80}
        protocol: tcp
      # HTTPS
      - target: 443
        published: ${HTTPS_PORT:-443}
        protocol: tcp
      # HTTP/3
      - target: 443
        published: ${HTTP3_PORT:-443}
        protocol: udp
    depends_on:
      db:
        condition: service_healthy

# --- GO / Kratos ----------------------------------------------------------
  #go-kratos:
  ##  container_name: autocondat-go
  #  image: go-kratos/kratos:latest  # Pre-built image
  #  restart: unless-stopped
  #  env_file: .env
  #  environment:
  #    APP_ENV: ${APP_ENV:-dev}
  #    KRATOS_LOG_LEVEL: debug
  #  ports:
      # REST / WebSocket
  #    - "8082:8080"
      # gRPC   
  #    - "9090:9090"
  #  volumes:
  #    - ./services/go:/app
  #  command: 
  #    - /bin/sh
  #    - -c
  #    - |
  #      cd /app && \
  #      go mod tidy && \
  #      kratos run
  #  networks:
  #    - autocondat-network
  #  healthcheck:
  #    test: ["CMD", "grpc_health_probe", "-addr=:9090"]
  #    interval: 30s
  #    timeout: 5s
  #    retries: 3
  #  depends_on:
  #    - cache
  #    - messaging

  # --- RUST / Actix ---------------------------------------------------------
  #rust-actix:
  #  container_name: autocondat-rust
  #  image: rust:latest
  #  restart: unless-stopped
  #  env_file: .env
  #  environment:
  #    RUST_LOG: info
  #    RUST_BACKTRACE: "1"
  #  ports:
  #    - "8081:8080"
  #  volumes:
  #    - ./services/rust:/usr/src/app
  #  working_dir: /usr/src/app
  #  command: 
  #    - /bin/sh
  #    - -c
  #    - |
  #      cargo install cargo-watch && \
  #      cargo watch -x "run"
  #  healthcheck:
  #    test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
  #    interval: 30s
  #    timeout: 5s
  #    retries: 3
  #  networks:
  #    - autocondat-network
  #  depends_on:
  #    - cache
  #    - messaging

  db:
    container_name: autocondat-db
    image: postgres:16-alpine
    restart: unless-stopped
    env_file: .env
    volumes:
      - ./services/postgres/initdb.d:/docker-entrypoint-initdb.d:ro
      - ./services/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./services/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    networks:
      - autocondat-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  cache:
    container_name: autocondat-cache
    image: redis:7-alpine
    restart: unless-stopped
    env_file: .env
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDISCLI_AUTH: ${REDIS_PASSWORD}
    volumes:
      - ./services/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - cache_data:/data
    networks:
      - autocondat-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$$REDIS_PASSWORD", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  messaging:
    container_name: autocondat-messaging
    image: rabbitmq:3-management-alpine
    restart: unless-stopped
    env_file: .env
    environment:
      RABBITMQ_CONFIG_FILE: /etc/rabbitmq/rabbitmq.conf
      RABBITMQ_DEFINITIONS_FILE: /etc/rabbitmq/definitions.json
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - ./services/rabbitmq:/etc/rabbitmq
      - messaging_data:/var/lib/rabbitmq
    networks:
      - autocondat-network
    ports: ["5672:5672", "15672:15672"]
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  cache-admin:
    container_name: autocondat-cache-admin
    image: redis/redisinsight:latest
    restart: unless-stopped
    env_file: .env
    ports: ["5540:5540"]
    environment:
      REDISINSIGHT_PASSWORD: ${CACHE_ADMIN_PASSWORD}
      RITRUSTEDORIGINS: "*"
      RI_AUTO_ADD_DATABASES: '[{"name":"Cache","host":"cache","port":6379,"password":"redis"}]'
    volumes:
      - redisinsight_data:/db
    networks:
      - autocondat-network
    depends_on:
      cache:
        condition: service_healthy

  db-admin:
    container_name: autocondat-db-admin
    image: adminer:latest
    restart: unless-stopped
    env_file: .env
    ports: ["8080:8080"]
    environment:
      ADMINER_DEFAULT_SERVER: db
      ADMINER_DESIGN: "pepa-linha"
      ADMINER_DEFAULT_USERNAME: ${ADMINER_DEFAULT_USERNAME}
      ADMINER_DEFAULT_PASSWORD: ${ADMINER_DEFAULT_PASSWORD}
    networks:
      - autocondat-network
    depends_on:
      db:
        condition: service_healthy

  code-quality:
    container_name: autocondat-code-quality
    image: sonarqube:community
    ports: ["9000:9000"]
    restart: unless-stopped
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - ./services/sonarqube/sonar.properties:/opt/sonarqube/conf/sonar.properties:ro
    networks:
      - autocondat-network
    mem_limit: 2g
    sysctls:
      - vm.max_map_count=262144
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      db:
        condition: service_healthy

  mailhog:
    container_name: autocondat-mailhog
    image: mailhog/mailhog
    ports: ["1025:1025", "8025:8025"]
    restart: unless-stopped
    networks:
      - autocondat-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8025"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  autocondat-network:
    driver: bridge

# Mercure is installed as a Caddy module, prevent the Flex recipe from installing another service
###> symfony/mercure-bundle ###
###< symfony/mercure-bundle ###

volumes:
  db_data:
  cache_data:
  messaging_data:
  redisinsight_data:
  caddy_data:
  caddy_config:
  sonarqube_data:
  sonarqube_extensions: